// Jenkinsfile
pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "angular-sdk-akademie"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        REGISTRY_URL = "your-registry-url"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    docker.image('node:18').inside {
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    docker.image('node:18').inside {
                        sh 'npm run test -- --watch=false --browsers=ChromeHeadless'
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                script {
                    docker.image('node:18').inside {
                        sh 'npm run build --prod'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def image = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}", "-f docker/production/Dockerfile .")
                    docker.withRegistry("https://${REGISTRY_URL}", 'docker-registry-credentials') {
                        image.push()
                        image.push('latest')
                    }
                }
            }
        }

        stage('Deploy to Staging') {
            when {
                branch 'develop'
            }
            steps {
                script {
                    sh """
                        docker-compose -f docker/production/docker-compose.yml down
                        docker-compose -f docker/production/docker-compose.yml up -d
                    """
                }
            }
        }

        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy to production?', ok: 'Deploy'
                script {
                    sh """
                        docker-compose -f docker/production/docker-compose.yml down
                        docker-compose -f docker/production/docker-compose.yml up -d
                    """
                }
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
